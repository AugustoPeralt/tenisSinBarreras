'use client'

import { useState } from 'react'
import { Calendar, CalendarPlus, Download, Smartphone, Clock, MapPin } from 'lucide-react'

interface Tournament {
  id: string
  name: string
  city: string
  country: string
  start_date: string
  end_date: string
  category: string
  surface: string
  venue?: string
}

interface CalendarIntegrationProps {
  tournament: Tournament
  flights?: {
    outbound: { departure: string; arrival: string }
    return: { departure: string; arrival: string }
  }
  accommodation?: {
    checkIn: string
    checkOut: string
    name: string
  }
}

export default function CalendarIntegration({ 
  tournament, 
  flights, 
  accommodation 
}: CalendarIntegrationProps) {
  const [isGenerating, setIsGenerating] = useState(false)

  // Generate ICS calendar file
  const generateICSFile = () => {
    setIsGenerating(true)

    try {
      const events = []

      // Tournament event
      const tournamentStart = new Date(tournament.start_date)
      const tournamentEnd = new Date(tournament.end_date)
      
      events.push({
        title: `🎾 ${tournament.name}`,
        description: `${tournament.category} tournament on ${tournament.surface} surface\\n` +
                    `Location: ${tournament.city}, ${tournament.country}\\n` +
                    `Venue: ${tournament.venue || 'TBA'}\\n\\n` +
                    `Generated by Tennis Travel Assistant`,
        location: `${tournament.venue || tournament.name}, ${tournament.city}, ${tournament.country}`,
        start: tournamentStart,
        end: tournamentEnd,
        allDay: true
      })

      // Flight events
      if (flights) {
        events.push({
          title: `✈️ Outbound Flight to ${tournament.city}`,
          description: `Flight departure for ${tournament.name}\\n` +
                      `Destination: ${tournament.city}, ${tournament.country}\\n\\n` +
                      `Generated by Tennis Travel Assistant`,
          start: new Date(flights.outbound.departure),
          end: new Date(flights.outbound.arrival),
          location: 'Airport'
        })

        events.push({
          title: `🏠 Return Flight from ${tournament.city}`,
          description: `Return flight from ${tournament.name}\\n` +
                      `From: ${tournament.city}, ${tournament.country}\\n\\n` +
                      `Generated by Tennis Travel Assistant`,
          start: new Date(flights.return.departure),
          end: new Date(flights.return.arrival),
          location: 'Airport'
        })
      }

      // Accommodation events
      if (accommodation) {
        events.push({
          title: `🏨 Check-in: ${accommodation.name}`,
          description: `Hotel check-in for ${tournament.name}\\n` +
                      `Hotel: ${accommodation.name}\\n` +
                      `Location: ${tournament.city}, ${tournament.country}\\n\\n` +
                      `Generated by Tennis Travel Assistant`,
          start: new Date(accommodation.checkIn),
          end: new Date(new Date(accommodation.checkIn).getTime() + 2 * 60 * 60 * 1000), // 2 hours
          location: accommodation.name
        })

        events.push({
          title: `🧳 Check-out: ${accommodation.name}`,
          description: `Hotel check-out for ${tournament.name}\\n` +
                      `Hotel: ${accommodation.name}\\n` +
                      `Location: ${tournament.city}, ${tournament.country}\\n\\n` +
                      `Generated by Tennis Travel Assistant`,
          start: new Date(accommodation.checkOut),
          end: new Date(new Date(accommodation.checkOut).getTime() + 1 * 60 * 60 * 1000), // 1 hour
          location: accommodation.name
        })
      }

      // Generate ICS content
      const icsContent = generateICSContent(events)
      
      // Download file
      const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' })
      const link = document.createElement('a')
      link.href = window.URL.createObjectURL(blob)
      link.download = `${tournament.name.replace(/\s+/g, '_')}_Schedule.ics`
      link.click()

    } catch (error) {
      console.error('Error generating calendar file:', error)
      alert('Error generating calendar file. Please try again.')
    } finally {
      setIsGenerating(false)
    }
  }

  // Generate Google Calendar URL
  const generateGoogleCalendarURL = () => {
    const startDate = new Date(tournament.start_date).toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z'
    const endDate = new Date(tournament.end_date).toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z'
    
    const params = new URLSearchParams({
      action: 'TEMPLATE',
      text: `🎾 ${tournament.name}`,
      dates: `${startDate}/${endDate}`,
      details: `${tournament.category} tournament on ${tournament.surface} surface\n` +
               `Location: ${tournament.city}, ${tournament.country}\n` +
               `Venue: ${tournament.venue || 'TBA'}\n\n` +
               `Generated by Tennis Travel Assistant`,
      location: `${tournament.venue || tournament.name}, ${tournament.city}, ${tournament.country}`,
      trp: 'false'
    })

    return `https://calendar.google.com/calendar/render?${params.toString()}`
  }

  // Generate Outlook Calendar URL
  const generateOutlookURL = () => {
    const startDate = new Date(tournament.start_date).toISOString()
    const endDate = new Date(tournament.end_date).toISOString()
    
    const params = new URLSearchParams({
      path: '/calendar/action/compose',
      rru: 'addevent',
      subject: `🎾 ${tournament.name}`,
      startdt: startDate,
      enddt: endDate,
      body: `${tournament.category} tournament on ${tournament.surface} surface\n` +
            `Location: ${tournament.city}, ${tournament.country}\n` +
            `Venue: ${tournament.venue || 'TBA'}\n\n` +
            `Generated by Tennis Travel Assistant`,
      location: `${tournament.venue || tournament.name}, ${tournament.city}, ${tournament.country}`
    })

    return `https://outlook.live.com/calendar/0/deeplink/compose?${params.toString()}`
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('es-ES', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  return (
    <div className="bg-white rounded-lg shadow-sm border p-6">
      <div className="flex items-center space-x-3 mb-6">
        <Calendar className="h-6 w-6 text-blue-600" />
        <h3 className="text-xl font-semibold text-gray-900">Add to Calendar</h3>
      </div>

      {/* Tournament Summary */}
      <div className="bg-blue-50 rounded-lg p-4 mb-6">
        <h4 className="font-semibold text-blue-900 mb-2">{tournament.name}</h4>
        <div className="space-y-1 text-sm text-blue-700">
          <div className="flex items-center space-x-2">
            <MapPin className="h-4 w-4" />
            <span>{tournament.city}, {tournament.country}</span>
          </div>
          <div className="flex items-center space-x-2">
            <Clock className="h-4 w-4" />
            <span>{formatDate(tournament.start_date)} - {formatDate(tournament.end_date)}</span>
          </div>
        </div>
      </div>

      {/* Calendar Options */}
      <div className="space-y-4">
        <h4 className="font-medium text-gray-900">Choose your calendar app:</h4>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
          {/* Google Calendar */}
          <a
            href={generateGoogleCalendarURL()}
            target="_blank"
            rel="noopener noreferrer"
            className="flex items-center space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors"
          >
            <div className="w-8 h-8 bg-red-500 rounded flex items-center justify-center">
              <Calendar className="h-4 w-4 text-white" />
            </div>
            <span className="font-medium text-gray-700">Google Calendar</span>
          </a>

          {/* Outlook Calendar */}
          <a
            href={generateOutlookURL()}
            target="_blank"
            rel="noopener noreferrer"
            className="flex items-center space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors"
          >
            <div className="w-8 h-8 bg-blue-500 rounded flex items-center justify-center">
              <Calendar className="h-4 w-4 text-white" />
            </div>
            <span className="font-medium text-gray-700">Outlook Calendar</span>
          </a>

          {/* Apple Calendar / Other */}
          <button
            onClick={generateICSFile}
            disabled={isGenerating}
            className="flex items-center space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50"
          >
            <div className="w-8 h-8 bg-gray-600 rounded flex items-center justify-center">
              <Download className="h-4 w-4 text-white" />
            </div>
            <span className="font-medium text-gray-700">
              {isGenerating ? 'Generating...' : 'Download ICS File'}
            </span>
          </button>

          {/* Mobile Calendar */}
          <button
            onClick={generateICSFile}
            className="flex items-center space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors sm:hidden"
          >
            <div className="w-8 h-8 bg-green-500 rounded flex items-center justify-center">
              <Smartphone className="h-4 w-4 text-white" />
            </div>
            <span className="font-medium text-gray-700">Mobile Calendar</span>
          </button>
        </div>
      </div>

      {/* Additional Events Info */}
      {(flights || accommodation) && (
        <div className="mt-6 p-4 bg-yellow-50 rounded-lg">
          <div className="flex items-start space-x-2">
            <CalendarPlus className="h-5 w-5 text-yellow-600 mt-0.5" />
            <div>
              <h5 className="font-medium text-yellow-800">Complete Itinerary</h5>
              <p className="text-sm text-yellow-700 mt-1">
                The ICS file includes all events: tournament, flights, and accommodation check-in/out times.
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// Helper function to generate ICS content
function generateICSContent(events: any[]) {
  let icsContent = 'BEGIN:VCALENDAR\r\n'
  icsContent += 'VERSION:2.0\r\n'
  icsContent += 'PRODID:-//Tennis Travel Assistant//Calendar//EN\r\n'
  icsContent += 'CALSCALE:GREGORIAN\r\n'

  events.forEach((event, index) => {
    const startDate = event.allDay 
      ? event.start.toISOString().split('T')[0].replace(/-/g, '')
      : event.start.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z'
    
    const endDate = event.allDay
      ? event.end.toISOString().split('T')[0].replace(/-/g, '')
      : event.end.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z'

    icsContent += 'BEGIN:VEVENT\r\n'
    icsContent += `UID:${Date.now()}-${index}@tennis-travel-assistant.com\r\n`
    icsContent += `DTSTAMP:${new Date().toISOString().replace(/[-:]/g, '').split('.')[0]}Z\r\n`
    icsContent += `DTSTART${event.allDay ? ';VALUE=DATE' : ''}:${startDate}\r\n`
    icsContent += `DTEND${event.allDay ? ';VALUE=DATE' : ''}:${endDate}\r\n`
    icsContent += `SUMMARY:${event.title}\r\n`
    icsContent += `DESCRIPTION:${event.description}\r\n`
    icsContent += `LOCATION:${event.location}\r\n`
    icsContent += 'END:VEVENT\r\n'
  })

  icsContent += 'END:VCALENDAR\r\n'
  return icsContent
}
